package gestion;

import clases.IngresoImpl;
import clases.PartidoImpl;
import clases.UsuarioImpl;
import conexion.ConexionJDBC;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.GregorianCalendar;

public class GestionSaldo {
    /*
     * Signatura: public boolean realizarIngresoEnCuentaUsuario(UsuarioImpl usuario, IngresoImpl ingreso)
     * Comentario: Realiza un ingreso de dinero en la cuenta del usuario.
     * Precondiciones: El objeto usuario recibido debe existir en la BBDD
     * Entradas: objeto usuario y objeto ingreso que sera el ingreso a introducir en la cuenta del usuario
     * Salidas: boolean que indicara el exito de la operacion
     * Entrada/Salida:
     * Postcondiciones: Modifica el objeto usuario actualizando su saldo actual. Devuelve asociado al nombre
     *                  un boolean que sera true si la operacion se realizo correctamente y false si hubo algun problema.
     *                  La base de datos quedará actualizada con un ingreso económico.
     * */
    public boolean realizarIngresoEnCuentaUsuario(UsuarioImpl usuario, IngresoImpl ingreso){
        ConexionJDBC conexionJDBC = new ConexionJDBC();
        Connection connection = conexionJDBC.getConnection();
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        boolean exito = false;

        String miSelect = "INSERT INTO Ingresos(cantidad, descripcion,id_usuario)\n" +
                "VALUES(?,?,?)";
        try {
            //Preparo el statement
            preparedStatement = connection.prepareStatement(miSelect);
            preparedStatement.setDouble(1,ingreso.getCantidad());
            preparedStatement.setString(2, ingreso.getDescripcion());
            preparedStatement.setInt(3, usuario.getId());
            //Ejecuto
            preparedStatement.executeQuery();
            exito = true;

            //Cierro
            preparedStatement.close();
            conexionJDBC.closeConnection(connection);
        }catch (SQLException e){
            e.getStackTrace();
        }
        return exito;
    }
    
    /*
	prototipo: public ArrayList<PartidoImpl> VerMovimientosCuentaDeLUsuario(int idUsuario) 
	comentarios: este método nos muestra el movimiento de la cuenta de un usuario 
	precondiciones: id correcto
	entradas: entero idUsuario
	salidas: array con los movimientos
	entradas/salidas: no hay 
	postcondiciones: AN devuelve un array con los movimientos de un usuario
	*/
	
	public ArrayList<PartidoImpl> VerMovimientosCuentaDeLUsuario() 
	{
		ConexionJDBC conexionJDBC = new ConexionJDBC();
		Connection connection = conexionJDBC.getConnection();
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		ArrayList<PartidoImpl> listadoPartidos = new ArrayList<>();
		PartidoImpl partido;
		GregorianCalendar fechaInicio;
		GregorianCalendar fechaFin;

		String miSelect = "select * from Ingresos where id=idUsuario";//preguntar
		try {
			//Preparo el statement
			preparedStatement = connection.prepareStatement(miSelect);
			//Ejecuto
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) 
			{
				partido = new PartidoImpl();
				fechaInicio = new GregorianCalendar();
				fechaFin = new GregorianCalendar();
				
				
				partido.setId(resultSet.getInt("id"));
				partido.setPeriodoApuestasAbierto(resultSet.getBoolean("isPeriodoApuestasAbierto"));
				partido.setGolesLocal(resultSet.getInt("golLocal"));
				partido.setGolesVisitante(resultSet.getInt("golVisitante"));
				
				if(resultSet.getDate("fechaInicio") != null)
				{
					fechaInicio.setTime(resultSet.getDate("fechaInicio"));
				}
				else
				{
					fechaFin = null;
				}
				partido.setFechaInicio(fechaInicio);
				if (resultSet.getDate("fechaFin") != null) 
				{
					fechaFin.setTime(resultSet.getDate("fechaFin"));
				} 
				else 
				{
					fechaFin = null;
				}
				partido.setFechaFin(fechaFin);
				partido.setNombreLocal(resultSet.getString("nombreLocal"));
				partido.setNombreVisitante(resultSet.getString("nombreVisitante"));

				listadoPartidos.add(partido);
			}


			preparedStatement.close();
			conexionJDBC.closeConnection(connection);
		}catch (SQLException e){
			e.getStackTrace();
		}
		return listadoPartidos;
	}
}
